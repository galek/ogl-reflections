#version 450 core

const uint LONGEST = 0xFFFFFFFF;
const float INFINITY = 1e10;

struct Ray {
    int actived;
    vec3 origin;
    vec3 direct;
    vec3 color;
    vec3 final;
    vec4 params;
};

struct Hit {
    float dist;
    uint triangle;
    uint materialID;
    vec3 normal;
    vec2 texcoord;
    vec4 params;
};

layout(std430, binding=7) buffer s_rays {Ray rays[];};
layout(std430, binding=8) buffer s_hits {Hit hits[];};

uniform mat4 projInv;
uniform mat4 camInv;
uniform vec2 sceneRes;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
    if(gl_GlobalInvocationID.x < sceneRes.x && gl_GlobalInvocationID.y < sceneRes.y){
        uint t = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * uint(sceneRes.x);

        vec2 coord = vec2(gl_GlobalInvocationID.xy);
        coord /= sceneRes;
        coord = coord * 2.0f - 1.0f;

        vec4 co = camInv * projInv * vec4(coord, 0.0f, 1.0f);
        co /= co.w;
        vec4 ce = camInv * vec4(0.0f, 0.0f, 0.0f, 1.0f);

        vec3 orig = ce.xyz;
        vec3 dir = normalize(co.xyz - orig.xyz);

        Ray ray;
        ray.direct = dir;
        ray.origin = orig;
        ray.actived = 1;
        ray.color = vec3(1.0f);
        ray.final = vec3(0.0f);
        ray.params.x = 1.0f;
        rays[t] = ray;
    }
}