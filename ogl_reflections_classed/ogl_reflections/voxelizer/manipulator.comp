#version 450 core

struct Minmax {
    vec3 mn;
    vec3 mx;
};

uniform uint count;

layout(std430, binding=1) buffer s_vbo {float verts[];};
layout(std430, binding=2) buffer s_ebo {uint indics[];};

layout (binding=0) uniform atomic_uint mcounter;

const uint LONGEST = 0xFFFFFFFF;
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

uniform vec3 offset;

void main(){
    uint idx = gl_GlobalInvocationID.x;
    if(idx < count){
        vec3 vertice = vec3(verts[idx * 3 + 0], verts[idx * 3 + 1], verts[idx * 3 + 2]);
        vertice += offset;

        verts[idx * 3 + 0] = vertice.x;
        verts[idx * 3 + 1] = vertice.y;
        verts[idx * 3 + 2] = vertice.z;
    }
}